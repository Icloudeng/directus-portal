default:
  tags:
    - smatflow-projects-runner

stages:
  - front-test
  - deploy-coding
  - deploy-testing
  - build-images

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

###################################

front-test:
  image: node:16.16
  stage: front-test
  cache:
    key: node_modules-cache
    paths:
      - node_modules/
  only:
    refs:
      - main
      - tags
  script:
    # Install PNPM and project Node dependencies.
    - npm install pnpm --location=global
    - pnpm install
    # run test or build
    - pnpm run build

######################################

deploy-coding:
  stage: deploy-coding
  image: python:3.10
  only:
    refs:
      - main
      - tags
  cache:
    key: pip-cache
    paths:
      - .cache/pip
  environment:
    name: coding env
  before_script:
    - export ANSIBLE_HOST_KEY_CHECKING=False
    - bash cicd_vars.sh
    - make ansible-install-cd
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ANSIBLE_DEPLOY_KEY")
  script:
    - echo "$AUTH_LDAP_DEFAULT_ROLE_ID__CODING"
    - echo "$DOCS_GENERATOR_ENV__CODING"

    - make provision-cd limits=coding
  when: manual

#######################################

deploy-testing:
  stage: deploy-testing
  image: python:3.10
  needs: [deploy-coding]
  only:
    refs:
      - main
      - tags
  cache:
    key: pip-cache
    paths:
      - .cache/pip
  environment:
    name: testing env
  before_script:
    - export ANSIBLE_HOST_KEY_CHECKING=False
    - bash cicd_vars.sh
    - make ansible-install-cd
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ANSIBLE_DEPLOY_KEY")
  script:
    - echo "$AUTH_LDAP_DEFAULT_ROLE_ID__TESTING"
    - echo "$DOCS_GENERATOR_ENV__TESTING"

    - make provision-cd limits=testing

build-images:
  image: docker:23.0.5
  stage: build-images
  needs: [front-test]
  services:
    - docker:23.0.5-dind
  only:
    refs:
      - main
      - tags
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "$CI_COMMIT_TAG"
    - echo "$CI_COMMIT_TAG_MESSAGE"
  script:
    - echo "Build Images, and create release"
    # - make docker-publish
  release:
    tag_name: "$CI_COMMIT_TAG"
    description: "$CI_COMMIT_TAG_MESSAGE"
  when: manual
