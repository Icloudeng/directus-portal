ARG WORK_APP=cms

# This Dockerfile is copy-pasted into our main docs at /docs/handbook/deploying-with-docker.
# Make sure you update both files!

FROM node:alpine AS builder
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
RUN apk update
RUN curl -f https://get.pnpm.io/v6.16.js | node - add --global pnpm
# Set working directory
WORKDIR /app
RUN pnpm add turbo -g
COPY . .
RUN turbo prune --scope=${WORK_APP} --docker


# Add lockfile and package.json's of isolated subworkspace
FROM node:alpine AS installer
RUN apk add --no-cache libc6-compat
RUN apk update
RUN curl -f https://get.pnpm.io/v6.16.js | node - add --global pnpm
# Set working directory
WORKDIR /app
# First install the dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
RUN pnpm install
# Build the project
COPY --from=builder /app/out/full/ .
COPY turbo.json turbo.json
# Build the apps
RUN pnpm turbo run build --filter=${WORK_APP}...


# Runner stage
FROM node:alpine AS runner
RUN curl -f https://get.pnpm.io/v6.16.js | node - add --global pnpm
WORKDIR /app
# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 ${WORK_APP}
USER ${WORK_APP}
# copy files
COPY --from=installer /app/apps/${WORK_APP} .
COPY --from=installer /app/apps/${WORK_APP}/.env.sample ./apps/${WORK_APP}/.env
COPY --from=installer /app/packages/*dist* .
COPY --from=installer /app/packages/*package.json .
# Automatically leverage output traces to reduce image size
COPY --from=installer --chown=${WORK_APP}:nodejs /app/apps/${WORK_APP}/uploads .
# Copy server runner server
COPY docker/scripts/start-cms.sh ./start-cms.sh
RUN chmod +x ./start-cms.sh
ENV WORK_APP=${WORK_APP}

CMD ["./start-cms.sh"]
