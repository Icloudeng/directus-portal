---
# tasks file for ansible/roles/app
- name: App Repository | Clone
  git:
    repo: "{{ repository_url }}"
    dest: "{{ root_path }}"
    force: yes
    version: "{{ app_git_version }}"

- name: PNPM | Setup
  command: pnpm setup
  args:
    chdir: "{{ root_path }}"
  ignore_errors: true

- name: Databases(Makefiile) | Mount databases docker compose
  become: true
  make:
    chdir: "{{ root_path }}"
    target: db-docker
  when: docker_install

- name: App Client | Download client dependencies
  command: pnpm install
  args:
    chdir: "{{ root_path }}"

- include_tasks: cms-config.yml
- include_tasks: web-config.yml
- include_tasks: docs-config.yml
  when: (docs_enabled | bool)

############################### BUILD APPs #############################

# Project Build
- name: "Web App (Project Build) | delete .next folder"
  command: "rm -rf .next/"
  args:
    chdir: "{{ root_path }}/apps/web"

- name: Project Build | Build all app packages
  command: pnpm run build --filter=!docs
  args:
    chdir: "{{ root_path }}"

############################### CMS #############################

# CMS App
- name: CMS App | App bootstrap
  command: pnpm run bootstrap
  args:
    chdir: "{{ root_path }}/apps/cms"

- name: CMS App | App apply snapshot
  command: pnpm run apply
  args:
    chdir: "{{ root_path }}/apps/cms"
    removes: "{{ root_path }}/apps/cms/snapshot.yaml"

# CMS App PM2 restart process
- name: CMS App | Delete old pm2 process
  command: "pm2 delete {{ cms_domain }}"
  args:
    chdir: "{{ root_path }}/apps/cms"
  ignore_errors: true

- name: CMS App | Start the server
  command: "pm2 start npm --name {{ cms_domain }} -- run start"
  args:
    chdir: "{{ root_path }}/apps/cms"

- name: CMS App | Sleep for 10 seconds and continue with play
  wait_for:
    timeout: 10

# CMS App | Create App User
- name: CMS App | Create App User
  command: "node create-app-user.js"
  args:
    chdir: "{{ root_path }}/apps/cms"

############################### WEB #############################

# Web App PM2 restart process
- name: Web App | Delete old pm2 process
  command: "pm2 delete {{ domain }}"
  args:
    chdir: "{{ root_path }}/apps/web"
  ignore_errors: true

- name: Web App | Start the server
  command: "pm2 start npm --name {{ domain }} -- run start"
  args:
    chdir: "{{ root_path }}/apps/web"

############################### DOCS #############################

- name: DOCS | env mode
  set_fact:
    docs_gen_env: "{{ lookup('env', 'DOCS_GENERATOR_ENV') }}"

# Docs App PM2 Name fact (It should set before docs generator)
- name: DOCS | PM2 Name
  set_fact:
    docs_pm2_name: "{{ domain }}-docs"

# Docs generator config (It should come after CMS)
- include_tasks: docs-generator.yml
  when: (docs_enabled | bool)

# Docs App PM2 restart process (It should come after DOCS generator)
- name: DOCS | Clear cache docs app
  command: pnpm run clear # Build only docs app from workspace
  args:
    chdir: "{{ root_path }}/apps/docs"
  when: (docs_enabled | bool)
  ignore_errors: true

- name: DOCS | Build docs app
  command: pnpm run build # Build only docs app from workspace
  args:
    chdir: "{{ root_path }}/apps/docs"
  when: (docs_enabled | bool)
  ignore_errors: true

- name: Docs App | Delete old pm2 process
  command: "pm2 delete {{ docs_pm2_name }}"
  args:
    chdir: "{{ root_path }}/apps/docs"
  ignore_errors: true
  when: (docs_enabled | bool)

- name: Docs App | Start the server (PROD)
  command: "pm2 start npm --name {{ docs_pm2_name }} -- run serve"
  args:
    chdir: "{{ root_path }}/apps/docs"
  when: (docs_enabled | bool) and docs_gen_env != "dev"

- name: Docs App | Start the server (DEV)
  command: "pm2 start npm --name {{ docs_pm2_name }} -- run dev"
  args:
    chdir: "{{ root_path }}/apps/docs"
  when: (docs_enabled | bool) and docs_gen_env == "dev"

# Config typesense and docsearch-scraper (Tools)
- include_tasks: docsearch-scraper.yml
  when: (docs_enabled | bool) and docker_install

# Gerate pm2 scripts
- name: PM2 | Generating a Startup Script
  shell: "pm2 startup | grep sudo"
  register: pm2_startup_command

- name: "Generate pm2 startup config (command -> {{ pm2_startup_command.stdout | trim }} )"
  shell: "{{ pm2_startup_command.stdout | trim }}"
  when: pm2_startup_command.stdout.startswith('sudo')

- name: PM2 | Save the app list to be restored at reboot
  command: "pm2 save"

- name: Reload nginx
  become: true
  service:
    name: nginx
    state: reloaded
  ignore_errors: true
