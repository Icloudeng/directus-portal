- name: DOCS Generator (Fact) | docs_gen_dir
  set_fact:
    docs_gen_dir: "{{ root_path }}/tools/docs-generator"

- name: DOCS Generator (Fact) | docs_gen_dir
  set_fact:
    env_file: "{{ docs_gen_dir }}/.env"

- name: DOCS Generator | env mode var
  set_fact:
    docs_gen_env_var: "DOCS_GENERATOR_ENV__{{ inventory_hostname | upper }}"

- name: DOCS Generator | env mode
  set_fact:
    docs_gen_env: "{{ lookup('env', docs_gen_env_var) }}"

- name: DOCS Generator | PM2 Name
  set_fact:
    pm2_name: "{{ docs_pm2_name }}-generator"

- name: DOCS Generator | Default vhost
  template:
    src: .env.local-docs-gen.j2
    dest: "{{ env_file }}.local"
    force: yes

- name: DOCS Generator | Sleep for 5 seconds and continue with play
  wait_for:
    timeout: 5

- name: DOCS Generator | Recursively remove dist directory
  become: false
  command: "rm -rf dist/"
  args:
    chdir: "{{ docs_gen_dir }}"
  ignore_errors: true

- name: DOCS Generator | Generate all documentation from CMS
  become: false
  command: pnpm run generate
  args:
    chdir: "{{ docs_gen_dir }}"

- name: DOCS Generator | Delete old pm2 process
  command: "pm2 delete {{ pm2_name }}"
  args:
    chdir: "{{ docs_gen_dir }}"
  ignore_errors: true

- name: DOCS Generator | Start the server (PROD)
  command: "pm2 start npm --name {{ pm2_name }} -- run start"
  args:
    chdir: "{{ docs_gen_dir }}"
  when: docs_gen_env != "dev"

- name: DOCS Generator | Start the server (DEV)
  command: "pm2 start npm --name {{ pm2_name }} -- run dev"
  args:
    chdir: "{{ docs_gen_dir }}"
  when: docs_gen_env == "dev"

- name: "DOCS Generator | CRON | PM2 {{ pm2_name }} restart"
  cron:
    name: "pm2-restart-{{ pm2_name }}"
    special_time: daily
    job: "pm2 restart {{ pm2_name }}"
